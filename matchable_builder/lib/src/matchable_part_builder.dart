import 'dart:async';
import 'dart:io';

import 'package:analyzer/dart/element/element.dart';
import 'package:build/src/builder/build_step.dart';
import 'package:build/src/builder/builder.dart';
import 'package:matchable_builder/src/abstract_matchable_builder.dart';
import 'package:matchable_builder/src/support/RequiredImport.dart';
import 'package:matchable_builder/src/support/RequiredPart.dart';

abstract class MatchablePartBuilder extends AbstractMatchableBuilder {
  MatchablePartBuilder(BuilderOptions options) : super(options);

  List<RequiredImport> get requiredImports;

  List<RequiredPart> get requiredParts;

  @override
  Future<void> runGenerate(
    LibraryElement library,
    List<Element> elements,
    BuildStep buildStep,
  ) async {
    ensureRequiredImports(library, buildStep);
    ensureRequiredParts();
    generate(library, elements, buildStep);
  }

  Future<void> ensureRequiredImports(LibraryElement library, BuildStep buildStep) async {
    final imports = [...requiredImports];

    if (imports.isEmpty) {
      return;
    }

    if (imports.any((r) => r.path == 'dart:core' && r.prefix != null)) {
      imports.add(RequiredImport(path: 'dart:core', prefix: null));
    }

    final lines = (await buildStep.readAsString(buildStep.inputId)).split('\n');

    for (final import in imports) {
      final shouldGenerate = !library.imports.any(
        (p) => p.uri == import.path && p.prefix?.name == import.prefix,
      );
      if (shouldGenerate) {
        final libraryLineNumber = lines.indexWhere((line) => line.startsWith('library'));

        var generatedLine = import.prefix == null
            ? 'import \'${import.path}\'; // Generated by ${this.runtimeType}'
            : 'import \'${import.path}\' as ${import.prefix}; // Generated by ${this.runtimeType}';

        lines.insert(
          libraryLineNumber + 1,
          generatedLine,
        );
      }
    }

    final file = File(buildStep.inputId.path);
    final outputContent = lines.join('\n');
    await file.writeAsString(outputContent, flush: true);
  }

  Future<void> ensureRequiredParts() async {}

  Future<void> generate(
    LibraryElement library,
    List<Element> elements,
    BuildStep buildStep,
  );
}
