import 'dart:core'; // Generated by DemoPartGenerator
import 'dart:core' as generated; // Generated by DemoPartGenerator
import 'dart:convert' as generated; // Generated by DemoPartGenerator
import 'dart:collection' as generated; // Generated by DemoPartGenerator

import 'dart:async';

import 'package:demo/src/demo_cache.dart';
import 'package:matchable_builder/matchable_builder.dart';

class DemoCollector extends MatchableBuilder {
  DemoCollector(BuilderOptions options) : super(options);

  @override
  Matcher<BuildStep> fileMatcher = Matcher.and([
    Matcher.nor([
      FilenameMatcher('builder.dart'),
      FilenameMatcher('demo_collector.dart'),
      FilenameMatcher('demo_cache.g.dart'),
      FilenameMatcher('demo_combiner.dart'),
      FilenameMatcher('demo_part_generator.dart'),
      FilenameExtensionMatcher('g.dart'),
    ]),
  ]);

  Matcher<Element> elementMatcher = Matcher.and([
    ClassElementMatcher(shouldBePublic: true),
  ]);

//  @override
//  Matcher get matcher => Matcher.and([
//        // every thing
//        FilenameExtensionMatcher('.dart'),
//        // exclude builder.dart
//        ClassElementSuperTypeMatcher<Object>(direct: true),
//        // exclude file outside lib/
//        FileSchemaMatcher('package'),
//        // exclude j
//        ClassElementMatcher(
//          shouldBeConcrete: true,
//          shouldBeClass: true,
//          shouldBePublic: true,
//        ),
//        // exclude i
//        Matcher.not(ClassElementAssignableFromMatcher<Exception>()),
//        // exclude h
//        Matcher.not(ClassElementInterfaceMatcher<Exception>()),
//        // exclude g
//        FilenameExactExtensionMatcher('.dart'),
//        // exclude f
//        Matcher.not(ElementAnnotationMatcher<Deprecated>()),
//        // exclude e
//        ElementTypeMatcher<ClassElement>(),
//        // exclude d
//        Matcher.not(ClassElementFieldAnnotationMatcher<Deprecated>()),
//        // exclude c
//        Matcher.not(ClassElementMethodAnnotationMatcher<Deprecated>()),
//        // exclude b
//        Matcher.not(ClassElementConstructorAnnotationMatcher<Deprecated>()),
//      ]);

  @override
  Map<String, List<String>> get buildExtensions => {
        '.dart': ['.demo.json'],
      };

  @override
  Future<void> generate(LibraryElement library, List<Element> elements, BuildStep buildStep) async {
    if (elements.isEmpty) {
      return null;
    }
    final cacheHelper = CacheHelper(buildStep);
    final cache = DemoCache(classNames: elements.map((e) => e.name).toList());
    await cacheHelper.writeAssetToExtension(".demo.json", cache);
  }
}
