import 'dart:core'; // Generated by DemoPartGenerator
import 'dart:core' as generated; // Generated by DemoPartGenerator
import 'dart:convert' as generated; // Generated by DemoPartGenerator
import 'dart:collection' as generated; // Generated by DemoPartGenerator

import 'package:build/src/builder/build_step.dart';
import 'package:build/src/builder/builder.dart';
import 'package:matchable_builder/matchable_builder.dart';

class DemoPartGenerator extends MatchablePartBuilder {
  DemoPartGenerator(BuilderOptions options) : super(options);

  @override
  Matcher<BuildStep> get fileMatcher => Matcher.nor([
        FilenameMatcher('builder.dart'),
        FilenameMatcher('demo.dart'),
        FilenameMatcher('demo_collector.dart'),
        FilenameMatcher('demo_cache.dart'),
        FilenameMatcher('demo_combiner.dart'),
        FilenameMatcher('demo_part_generator.dart'),
      ]);

  @override
  Map<String, List<String>> get buildExtensions => {
        '.dart': ['.test.g.part', '.test2.g.part', '.test3.g.part'],
      };

  @override
  List<RequiredImport> get requiredImports => [
        RequiredImport(path: 'dart:core', prefix: 'generated'),
        RequiredImport(path: 'dart:collection', prefix: 'generated'),
        RequiredImport(path: 'dart:convert', prefix: 'generated'),
      ];

  @override
  List<RequiredPart> get requiredParts => [
        ChangeExtensionPart(extension: '.g.dart'),
      ];

  @override
  Future<void> generate(LibraryElement library, List<Element> elements, BuildStep buildStep) {
    buildStep.writeAsString(buildStep.inputId.changeExtension('.test.g.part'), '// Test1');
    buildStep.writeAsString(buildStep.inputId.changeExtension('.test2.g.part'), '// Test2');
    buildStep.writeAsString(buildStep.inputId.changeExtension('.test3.g.part'), '// Test3');
    return null;
  }
}
